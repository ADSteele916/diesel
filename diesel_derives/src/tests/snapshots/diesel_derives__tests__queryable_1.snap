---
source: diesel_derives/src/tests/mod.rs
expression: out
info:
  input: "#[derive(Queryable)]\nstruct User {\n    id: i32,\n    name: String,\n}\n"
---
const _: () = {
    use diesel;
    use diesel::row::{Row as _, Field as _};
    impl<
        __DB: diesel::backend::Backend,
        __ST0,
        __ST1,
    > diesel::deserialize::Queryable<(__ST0, __ST1), __DB> for User
    where
        (i32, String): diesel::deserialize::FromStaticSqlRow<(__ST0, __ST1), __DB>,
    {
        type Row = (i32, String);
        fn build(row: (i32, String)) -> diesel::deserialize::Result<Self> {
            Ok(Self {
                id: std::convert::TryInto::try_into(row.0)?,
                name: std::convert::TryInto::try_into(row.1)?,
            })
        }
    }
};
