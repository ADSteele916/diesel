warning: use of deprecated function `diesel::dsl::any`: Use `ExpressionMethods::eq_any` instead
  --> tests/fail/any_is_only_selectable_if_inner_expr_is_selectable.rs:30:34
   |
30 |     let _ = stuff.filter(name.eq(any(more_stuff::names)))
   |                                  ^^^
   |
   = note: `#[warn(deprecated)]` on by default

error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
  --> tests/fail/any_is_only_selectable_if_inner_expr_is_selectable.rs:31:15
   |
31 |         .load(&mut conn);
   |          ---- ^^^^^^^^^ expected `Once`, found `Never`
   |          |
   |          required by a bound introduced by this call
   |
note: required for `more_stuff::columns::names` to implement `AppearsOnTable<stuff::table>`
  --> tests/fail/any_is_only_selectable_if_inner_expr_is_selectable.rs:15:9
   |
15 |         names -> Array<VarChar>,
   |         ^^^^^
   = note: associated types for the current `impl` cannot be restricted in `where` clauses
   = note: 3 redundant requirements hidden
   = note: required for `Grouped<Eq<name, Any<names>>>` to implement `AppearsOnTable<stuff::table>`
   = note: required for `WhereClause<Grouped<Eq<name, Any<names>>>>` to implement `diesel::query_builder::where_clause::ValidWhereClause<FromClause<stuff::table>>`
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<...>>` to implement `Query`
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<...>>` to implement `LoadQuery<'_, _, _>`
note: required by a bound in `diesel::RunQueryDsl::load`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
   |        ---- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `stuff::table: TableNotEqual<more_stuff::table>` is not satisfied
  --> tests/fail/any_is_only_selectable_if_inner_expr_is_selectable.rs:31:15
   |
31 |         .load(&mut conn);
   |          ---- ^^^^^^^^^ the trait `TableNotEqual<more_stuff::table>` is not implemented for `stuff::table`, which is required by `SelectStatement<FromClause<stuff::table>, diesel::query_builder::select_clause::DefaultSelectClause<FromClause<stuff::table>>, diesel::query_builder::distinct_clause::NoDistinctClause, diesel::query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<stuff::columns::name, diesel::pg::expression::array_comparison::Any<more_stuff::columns::names>>>>>: LoadQuery<'_, _, _>`
   |          |
   |          required by a bound introduced by this call
   |
   = note: double check that `more_stuff::table` and `stuff::table` appear in the same `allow_tables_to_appear_in_same_query!`
           call if both are tables
   = note: double check that `more_stuff::table` and `stuff::table` appear in the same `alias!` call if both
           are aliases to the same table
   = help: the following other types implement trait `TableNotEqual<T>`:
             <Only<pg::metadata_lookup::pg_namespace::table> as TableNotEqual<pg::metadata_lookup::pg_type::table>>
             <Only<pg::metadata_lookup::pg_type::table> as TableNotEqual<pg::metadata_lookup::pg_namespace::table>>
             <Tablesample<pg::metadata_lookup::pg_namespace::table, TSM> as TableNotEqual<pg::metadata_lookup::pg_type::table>>
             <Tablesample<pg::metadata_lookup::pg_type::table, TSM> as TableNotEqual<pg::metadata_lookup::pg_namespace::table>>
             <pg::metadata_lookup::pg_namespace::table as TableNotEqual<Only<pg::metadata_lookup::pg_type::table>>>
             <pg::metadata_lookup::pg_namespace::table as TableNotEqual<Tablesample<pg::metadata_lookup::pg_type::table, TSM>>>
             <pg::metadata_lookup::pg_namespace::table as TableNotEqual<pg::metadata_lookup::pg_type::table>>
             <pg::metadata_lookup::pg_type::table as TableNotEqual<Only<pg::metadata_lookup::pg_namespace::table>>>
           and $N others
   = note: required for `stuff::table` to implement `AppearsInFromClause<more_stuff::table>`
note: required for `more_stuff::columns::names` to implement `AppearsOnTable<stuff::table>`
  --> tests/fail/any_is_only_selectable_if_inner_expr_is_selectable.rs:15:9
   |
15 |         names -> Array<VarChar>,
   |         ^^^^^
   = note: 3 redundant requirements hidden
   = note: required for `Grouped<Eq<name, Any<names>>>` to implement `AppearsOnTable<stuff::table>`
   = note: required for `WhereClause<Grouped<Eq<name, Any<names>>>>` to implement `diesel::query_builder::where_clause::ValidWhereClause<FromClause<stuff::table>>`
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<...>>` to implement `Query`
   = note: required for `SelectStatement<FromClause<table>, DefaultSelectClause<FromClause<table>>, NoDistinctClause, WhereClause<...>>` to implement `LoadQuery<'_, _, _>`
note: required by a bound in `diesel::RunQueryDsl::load`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
   |        ---- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
   = note: consider using `--verbose` to print the full type name to the console
