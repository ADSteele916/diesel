error[E0277]: the trait bound `(diesel::sql_types::Integer, diesel::sql_types::Text, diesel::sql_types::Nullable<diesel::sql_types::Text>): load_dsl::private::CompatibleType<UserWithToFewFields, _>` is not satisfied
  --> tests/fail/derive/queryable_type_mismatch.rs:59:54
   |
59 |     let _ = users::table.load::<UserWithToFewFields>(conn);
   |                          ----                        ^^^^ the trait `load_dsl::private::CompatibleType<UserWithToFewFields, _>` is not implemented for `(diesel::sql_types::Integer, diesel::sql_types::Text, diesel::sql_types::Nullable<diesel::sql_types::Text>)`
   |                          |
   |                          required by a bound introduced by this call
   |
   = help: the following other types implement trait `load_dsl::private::CompatibleType<U, DB>`:
             (ST0,)
             (ST0, ST1)
             (ST0, ST1, ST2)
             (ST0, ST1, ST2, ST3)
             (ST0, ST1, ST2, ST3, ST4)
             (ST0, ST1, ST2, ST3, ST4, ST5)
             (ST0, ST1, ST2, ST3, ST4, ST5, ST6)
             (ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7)
           and $N others
   = note: required for `users::table` to implement `LoadQuery<'_, _, UserWithToFewFields>`
note: required by a bound in `diesel::RunQueryDsl::load`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
   |        ---- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: the trait bound `(diesel::sql_types::Integer, diesel::sql_types::Text, diesel::sql_types::Nullable<diesel::sql_types::Text>): load_dsl::private::CompatibleType<UserWithToManyFields, _>` is not satisfied
  --> tests/fail/derive/queryable_type_mismatch.rs:61:55
   |
61 |     let _ = users::table.load::<UserWithToManyFields>(conn);
   |                          ----                         ^^^^ the trait `load_dsl::private::CompatibleType<UserWithToManyFields, _>` is not implemented for `(diesel::sql_types::Integer, diesel::sql_types::Text, diesel::sql_types::Nullable<diesel::sql_types::Text>)`
   |                          |
   |                          required by a bound introduced by this call
   |
   = help: the following other types implement trait `load_dsl::private::CompatibleType<U, DB>`:
             (ST0,)
             (ST0, ST1)
             (ST0, ST1, ST2)
             (ST0, ST1, ST2, ST3)
             (ST0, ST1, ST2, ST3, ST4)
             (ST0, ST1, ST2, ST3, ST4, ST5)
             (ST0, ST1, ST2, ST3, ST4, ST5, ST6)
             (ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7)
           and $N others
   = note: required for `users::table` to implement `LoadQuery<'_, _, UserWithToManyFields>`
note: required by a bound in `diesel::RunQueryDsl::load`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
   |        ---- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: the trait bound `(diesel::sql_types::Integer, diesel::sql_types::Text, diesel::sql_types::Nullable<diesel::sql_types::Text>): load_dsl::private::CompatibleType<UserWrongOrder, _>` is not satisfied
  --> tests/fail/derive/queryable_type_mismatch.rs:63:49
   |
63 |     let _ = users::table.load::<UserWrongOrder>(conn);
   |                          ----                   ^^^^ the trait `load_dsl::private::CompatibleType<UserWrongOrder, _>` is not implemented for `(diesel::sql_types::Integer, diesel::sql_types::Text, diesel::sql_types::Nullable<diesel::sql_types::Text>)`
   |                          |
   |                          required by a bound introduced by this call
   |
   = help: the following other types implement trait `load_dsl::private::CompatibleType<U, DB>`:
             (ST0,)
             (ST0, ST1)
             (ST0, ST1, ST2)
             (ST0, ST1, ST2, ST3)
             (ST0, ST1, ST2, ST3, ST4)
             (ST0, ST1, ST2, ST3, ST4, ST5)
             (ST0, ST1, ST2, ST3, ST4, ST5, ST6)
             (ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7)
           and $N others
   = note: required for `users::table` to implement `LoadQuery<'_, _, UserWrongOrder>`
note: required by a bound in `diesel::RunQueryDsl::load`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
   |        ---- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`

error[E0277]: the trait bound `(diesel::sql_types::Integer, diesel::sql_types::Text, diesel::sql_types::Nullable<diesel::sql_types::Text>): load_dsl::private::CompatibleType<UserTypeMismatch, _>` is not satisfied
  --> tests/fail/derive/queryable_type_mismatch.rs:65:51
   |
65 |     let _ = users::table.load::<UserTypeMismatch>(conn);
   |                          ----                     ^^^^ the trait `load_dsl::private::CompatibleType<UserTypeMismatch, _>` is not implemented for `(diesel::sql_types::Integer, diesel::sql_types::Text, diesel::sql_types::Nullable<diesel::sql_types::Text>)`
   |                          |
   |                          required by a bound introduced by this call
   |
   = help: the following other types implement trait `load_dsl::private::CompatibleType<U, DB>`:
             (ST0,)
             (ST0, ST1)
             (ST0, ST1, ST2)
             (ST0, ST1, ST2, ST3)
             (ST0, ST1, ST2, ST3, ST4)
             (ST0, ST1, ST2, ST3, ST4, ST5)
             (ST0, ST1, ST2, ST3, ST4, ST5, ST6)
             (ST0, ST1, ST2, ST3, ST4, ST5, ST6, ST7)
           and $N others
   = note: required for `users::table` to implement `LoadQuery<'_, _, UserTypeMismatch>`
note: required by a bound in `diesel::RunQueryDsl::load`
  --> $DIESEL/src/query_dsl/mod.rs
   |
   |     fn load<'query, U>(self, conn: &mut Conn) -> QueryResult<Vec<U>>
   |        ---- required by a bound in this associated function
   |     where
   |         Self: LoadQuery<'query, Conn, U>,
   |               ^^^^^^^^^^^^^^^^^^^^^^^^^^ required by this bound in `RunQueryDsl::load`
