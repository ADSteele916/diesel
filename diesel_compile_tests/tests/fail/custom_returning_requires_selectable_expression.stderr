error[E0277]: Cannot select `bad::columns::age` from `users::table`
  --> tests/fail/custom_returning_requires_selectable_expression.rs:30:20
   |
30 |         .returning(bad::age);
   |          --------- ^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `bad::columns::age`, which is required by `UpdateStatement<users::table, diesel::query_builder::where_clause::WhereClause<diesel::expression::grouped::Grouped<diesel::expression::operators::Eq<users::columns::id, diesel::expression::bound::Bound<diesel::sql_types::Integer, i32>>>>, diesel::query_builder::update_statement::changeset::Assign<diesel::query_builder::update_statement::changeset::ColumnWrapperForUpdate<users::columns::name>, diesel::expression::bound::Bound<diesel::sql_types::Text, &str>>, ReturningClause<_>>: Query`
   |          |
   |          required by a bound introduced by this call
   |
   = note: `bad::columns::age` is no valid selection for `users::table`
   = help: the following other types implement trait `SelectableExpression<QS>`:
             <bad::columns::age as SelectableExpression<bad::table>>
             <bad::columns::age as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
             <bad::columns::age as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
             <bad::columns::age as SelectableExpression<SelectStatement<FromClause<From>>>>
             <bad::columns::age as SelectableExpression<JoinOn<Join, On>>>
             <bad::columns::age as SelectableExpression<Only<bad::table>>>
             <bad::columns::age as SelectableExpression<Tablesample<bad::table, TSM>>>
   = note: required for `UpdateStatement<table, WhereClause<Grouped<Eq<id, Bound<Integer, i32>>>>, Assign<..., ...>, ...>` to implement `Query`
note: required by a bound in `UpdateStatement::<T, U, V>::returning`
  --> $DIESEL/src/query_builder/update_statement/mod.rs
   |
   |     pub fn returning<E>(self, returns: E) -> UpdateStatement<T, U, V, ReturningClause<E>>
   |            --------- required by a bound in this associated function
...
   |         UpdateStatement<T, U, V, ReturningClause<E>>: Query,
   |                                                       ^^^^^ required by this bound in `UpdateStatement::<T, U, V>::returning`
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: Cannot select `bad::columns::age` from `users::table`
  --> tests/fail/custom_returning_requires_selectable_expression.rs:37:20
   |
37 |         .returning((name, bad::age));
   |          --------- ^^^^^^^^^^^^^^^^ the trait `SelectableExpression<users::table>` is not implemented for `bad::columns::age`, which is required by `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<(DefaultableColumnInsertValue<ColumnInsertValue<users::columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>,), users::table>, diesel::query_builder::insert_statement::private::Insert, ReturningClause<_>>: Query`
   |          |
   |          required by a bound introduced by this call
   |
   = note: `bad::columns::age` is no valid selection for `users::table`
   = help: the following other types implement trait `SelectableExpression<QS>`:
             <bad::columns::age as SelectableExpression<bad::table>>
             <bad::columns::age as SelectableExpression<query_source::joins::Join<Left, Right, Inner>>>
             <bad::columns::age as SelectableExpression<query_source::joins::Join<Left, Right, LeftOuter>>>
             <bad::columns::age as SelectableExpression<SelectStatement<FromClause<From>>>>
             <bad::columns::age as SelectableExpression<JoinOn<Join, On>>>
             <bad::columns::age as SelectableExpression<Only<bad::table>>>
             <bad::columns::age as SelectableExpression<Tablesample<bad::table, TSM>>>
   = note: required for `(users::columns::name, bad::columns::age)` to implement `SelectableExpression<users::table>`
   = note: required for `InsertStatement<table, ValuesClause<(DefaultableColumnInsertValue<...>,), ...>, ..., ...>` to implement `Query`
note: required by a bound in `InsertStatement::<T, U, Op>::returning`
  --> $DIESEL/src/query_builder/insert_statement/mod.rs
   |
   |     pub fn returning<E>(self, returns: E) -> InsertStatement<T, U, Op, ReturningClause<E>>
   |            --------- required by a bound in this associated function
   |     where
   |         InsertStatement<T, U, Op, ReturningClause<E>>: Query,
   |                                                        ^^^^^ required by this bound in `InsertStatement::<T, U, Op>::returning`
   = note: consider using `--verbose` to print the full type name to the console

error[E0271]: type mismatch resolving `<table as AppearsInFromClause<table>>::Count == Once`
  --> tests/fail/custom_returning_requires_selectable_expression.rs:37:20
   |
37 |         .returning((name, bad::age));
   |          --------- ^^^^^^^^^^^^^^^^ expected `Once`, found `Never`
   |          |
   |          required by a bound introduced by this call
   |
note: required for `bad::columns::age` to implement `AppearsOnTable<users::table>`
  --> tests/fail/custom_returning_requires_selectable_expression.rs:15:7
   |
15 |       age -> Integer,
   |       ^^^
   = note: associated types for the current `impl` cannot be restricted in `where` clauses
   = note: 1 redundant requirement hidden
   = note: required for `(users::columns::name, bad::columns::age)` to implement `AppearsOnTable<users::table>`
   = note: required for `(users::columns::name, bad::columns::age)` to implement `SelectableExpression<users::table>`
   = note: required for `InsertStatement<table, ValuesClause<(DefaultableColumnInsertValue<...>,), ...>, ..., ...>` to implement `Query`
note: required by a bound in `InsertStatement::<T, U, Op>::returning`
  --> $DIESEL/src/query_builder/insert_statement/mod.rs
   |
   |     pub fn returning<E>(self, returns: E) -> InsertStatement<T, U, Op, ReturningClause<E>>
   |            --------- required by a bound in this associated function
   |     where
   |         InsertStatement<T, U, Op, ReturningClause<E>>: Query,
   |                                                        ^^^^^ required by this bound in `InsertStatement::<T, U, Op>::returning`
   = note: consider using `--verbose` to print the full type name to the console

error[E0277]: the trait bound `users::table: TableNotEqual<bad::table>` is not satisfied
  --> tests/fail/custom_returning_requires_selectable_expression.rs:37:20
   |
37 |         .returning((name, bad::age));
   |          --------- ^^^^^^^^^^^^^^^^ the trait `TableNotEqual<bad::table>` is not implemented for `users::table`, which is required by `InsertStatement<users::table, diesel::query_builder::insert_statement::ValuesClause<(DefaultableColumnInsertValue<ColumnInsertValue<users::columns::name, diesel::expression::bound::Bound<diesel::sql_types::Text, &std::string::String>>>,), users::table>, diesel::query_builder::insert_statement::private::Insert, ReturningClause<_>>: Query`
   |          |
   |          required by a bound introduced by this call
   |
   = note: Double check that `bad::table` and `users::table` appear in the same `allow_tables_to_appear_in_same_query!`
           call if both are tables
   = note: Double check that `bad::table` and `users::table` appear in the same `alias!` call if both
           are aliases to the same table
   = help: the following other types implement trait `TableNotEqual<T>`:
             <Only<pg::metadata_lookup::pg_namespace::table> as TableNotEqual<pg::metadata_lookup::pg_type::table>>
             <Only<pg::metadata_lookup::pg_type::table> as TableNotEqual<pg::metadata_lookup::pg_namespace::table>>
             <Tablesample<pg::metadata_lookup::pg_namespace::table, TSM> as TableNotEqual<pg::metadata_lookup::pg_type::table>>
             <Tablesample<pg::metadata_lookup::pg_type::table, TSM> as TableNotEqual<pg::metadata_lookup::pg_namespace::table>>
             <pg::metadata_lookup::pg_namespace::table as TableNotEqual<Only<pg::metadata_lookup::pg_type::table>>>
             <pg::metadata_lookup::pg_namespace::table as TableNotEqual<Tablesample<pg::metadata_lookup::pg_type::table, TSM>>>
             <pg::metadata_lookup::pg_namespace::table as TableNotEqual<pg::metadata_lookup::pg_type::table>>
             <pg::metadata_lookup::pg_type::table as TableNotEqual<Only<pg::metadata_lookup::pg_namespace::table>>>
           and $N others
   = note: required for `users::table` to implement `AppearsInFromClause<bad::table>`
note: required for `bad::columns::age` to implement `AppearsOnTable<users::table>`
  --> tests/fail/custom_returning_requires_selectable_expression.rs:15:7
   |
15 |       age -> Integer,
   |       ^^^
   = note: 1 redundant requirement hidden
   = note: required for `(users::columns::name, bad::columns::age)` to implement `AppearsOnTable<users::table>`
   = note: required for `(users::columns::name, bad::columns::age)` to implement `SelectableExpression<users::table>`
   = note: required for `InsertStatement<table, ValuesClause<(DefaultableColumnInsertValue<...>,), ...>, ..., ...>` to implement `Query`
note: required by a bound in `InsertStatement::<T, U, Op>::returning`
  --> $DIESEL/src/query_builder/insert_statement/mod.rs
   |
   |     pub fn returning<E>(self, returns: E) -> InsertStatement<T, U, Op, ReturningClause<E>>
   |            --------- required by a bound in this associated function
   |     where
   |         InsertStatement<T, U, Op, ReturningClause<E>>: Query,
   |                                                        ^^^^^ required by this bound in `InsertStatement::<T, U, Op>::returning`
   = note: consider using `--verbose` to print the full type name to the console
